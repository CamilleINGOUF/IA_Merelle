#include<vector>
#include<iostream>
#include<algorithm>
#include<cstdlib>
#include<ctime>

using namespace std;

enum Couleur {Vide=0, Blanc=1, Noir=2};


class Move {
public:
  Couleur joueur;
  int depuis, vers; // case numÃ©rotÃ©es de 0 Ã  8 (si depuis = -1 => placement)
  Move() {}
  Move(Couleur j, int d, int v) : joueur(j), depuis(d), vers(v) {};
  bool operator==(const Move &b) {
    return joueur==b.joueur and depuis==b.depuis and vers==b.vers;
  };
};
	   
class Position{
  vector<Couleur> plateau;
  Couleur joueur = Blanc; // joueur ayant le trait
  int nb_coups= 0; // compteur de pions dÃ©jÃ  placÃ©s
public:
  Couleur getProchain() const { return joueur;}
  Position();
  Position(const Position &p);
  bool endOfGame();
  void display();
  Move getMove();
  Move getMoveAlea(vector<Move> jouables); 
  void doMove(Move m);
  void prochainJoueur();
  vector<Move> coupsJouables();
  bool gagne(Couleur joueur);
  float eval(Couleur j);
  Move getMoveAlphaBeta();
  Move getMoveAlphaBetaAux(Couleur jo, int depth);
};
